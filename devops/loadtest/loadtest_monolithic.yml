- name: Loadtest monolithicc
  hosts: localhost
  gather_facts: no

  vars:
    vm1_host: "{{ groups['vm_group1'][0] }}"
    vm2_host: "{{ groups['vm_group1'][1] }}"
    image_registry: "{{ hostvars[groups['baremetal'][0]]['hostname'] }}:5000"
    api_hostname: monolithic
    db_hostname: db
    api_url: "http://{{ api_hostname }}"

  tasks:
    - name: Add {{ api_hostname }} DNS to /etc/hosts
      become: true
      shell: "echo '{{ item.ip }} {{ item.host }}' >> /etc/hosts"
      loop:
        - host: "{{ api_hostname }}"
          ip: "{{ hostvars[vm1_host]['ansible_host'] }}"
        - host: "{{ db_hostname }}"
          ip: "{{ hostvars[vm2_host]['ansible_host'] }}"

    - name: Create hosts dictionary from group
      set_fact:
        container_custom_hosts: "{{ dict(groups['vm_group1'] | map('extract', hostvars, 'hostname') | zip(groups['vm_group1'] | map('extract', hostvars, 'vm_ip'))) }}"

    - name: Create Docker volume
      delegate_to: "{{ vm2_host }}"
      docker_volume:
        name: db-data

    - name: Start CockroachDB container
      delegate_to: "{{ vm2_host }}"
      docker_container:
        name: db
        image: "{{ image_registry }}/cockroach:latest-v22.2"
        restart_policy: always
        command: start-single-node --insecure
        volumes:
          - db-data:/cockroach/cockroach-data
        etc_hosts: "{{ container_custom_hosts }}"
        published_ports:
          - 26257:26257
          - 8080:8080

    - name:  Wait for CockroachDB start
      uri:
        url: "http://{{ db_hostname }}:8080/_admin/v1/health"
        method: GET
        return_content: yes
      register: api_docs_response
      until: api_docs_response.status == 200
      retries: 120
      delay: 1

    - name: Execute mock script
      shell: python /devops/loadtest/mock/monolithic_data.py

    - name: Import mock data to CockroachDB
      community.postgresql.postgresql_script:
        login_host: "{{ db_hostname }}"
        port: 26257
        login_user: root
        ssl_mode: disable
        path: /devops/loadtest/preload/mock_monolithic_data.sql

    - name: Create monolithic container
      delegate_to: "{{ vm1_host }}"
      docker_container:
        name: api
        image: "{{ image_registry }}/monolithic:latest"
        restart_policy: always
        env:
          DATABASE_URL: "cockroachdb+psycopg2://root@{{ hostvars[vm2_host]['hostname'] }}:26257/monolithic?sslmode=disable"
          SECRET_KEY: "{{ secret_key }}"
        etc_hosts: "{{ container_custom_hosts }}"
        published_ports:
          - 8000:8000

    - name: Create reverse proxy container
      delegate_to: "{{ vm1_host }}"
      docker_container:
        name: nginx
        image: "{{ image_registry }}/nginx:1.21.6-alpine"
        restart_policy: always
        volumes:
          - "/home/{{ ansible_user }}/nginx.conf:/etc/nginx/nginx.conf:ro"
          - "/home/{{ ansible_user }}/vhost.conf:/etc/nginx/conf.d/default.conf:ro"
        etc_hosts: "{{ container_custom_hosts }}"
        published_ports:
          - 80:80

    - name: Wait for API ready
      uri:
        url: "{{ api_url }}/api/docs"
        method: GET
        return_content: yes
      register: api_docs_response
      until: api_docs_response.status == 200
      retries: 60
      delay: 1

    - name: Sleep 5 seconds before loadtest
      pause:
        seconds: 5

    - name: Query account numbers from CockroachDB
      community.postgresql.postgresql_query:
        login_host: "{{ db_hostname }}"
        port: 26257
        login_user: root
        ssl_mode: disable
        db: monolithic
        query: SELECT account_number FROM accounts
      register: accounts_result

    # - name: Debug accounts_result
    #   debug:
    #     var: accounts_result

    - name: Convert account numbers to array
      set_fact:
        account_numbers: "{{ accounts_result.query_result | map(attribute='account_number') | list }}"

    # - name: Debug account numbers
    #   debug:
    #     var: account_numbers

    - name: Create env.js file
      template:
        src: /devops/loadtest/k6_template_monolithic.js
        dest: /devops/loadtest/preload/k6_monolithic.js

    - name: Run k6 loadtest script
      shell: |
        k6 run \
        --summary-export=/loadtest_result/loadtest_monolithic_{{ '%Y%m%d%H%M%S' | strftime }}.json \
        --vus 20 --duration 10s \
        /devops/loadtest/preload/k6_monolithic.js

    - name: Delete monolithic container
      delegate_to: "{{ vm1_host }}"
      docker_container:
        name: api
        state: absent

    - name: Delete reverse proxy container
      delegate_to: "{{ vm1_host }}"
      docker_container:
        name: nginx
        state: absent

    - name: Delete CockroachDB container
      delegate_to: "{{ vm2_host }}"
      docker_container:
        name: db
        state: absent

    - name: Delete DB volume
      delegate_to: "{{ vm2_host }}"
      docker_volume:
        name: db-data
        state: absent